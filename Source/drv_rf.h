
#pragma once

void startupRF(void);
void shutdownRF(void);
uint16_t getRFState(void);
void setRFState(uint8_t state);
void modemInit(void);
void modemTxInit(void);
void modemRxInit(void);
void modemInitDirect(void);
void modemTX(uint8_t *txData, uint8_t dataLength, uint8_t hopchannel);
void clearFIFOs(void);

//Register listing follows, sorted by group

/*GLOBAL
group 0x00

0x00	GLOBAL_XO_TUNE            this has been calibrated on spectrumanalyzer
0x01	GLOBAL_CLK_CFG
0x02	GLOBAL_LOW_BATT_THRESH
0x03	GLOBAL_CONFIG             note this one needs to be set
0x04	GLOBAL_WUT_CONFIG
0x05	GLOBAL_WUT_M
0x07	GLOBAL_WUT_R
0x08	GLOBAL_WUT_LDC
0x09	GLOBAL_WUT_CAL

*/
#define GLOBAL_SIZE 10
//Reg #:                                   0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09
//Defaults                                 0x40, 0x00, 0x18, 0x20, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00
static uint8_t GLOBAL_SET[GLOBAL_SIZE] = { 0x85, 0x00, 0x18, 0x60, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00 };

/*INT_CTL
group 0x01

0x00	INT_CTL_ENABLE
0x01	INT_CTL_PH_ENABLE
0x02	INT_CTL_MODEM_ENABLE
0x03	INT_CTL_CHIP_ENABLE

*/
#define INT_CTL_SIZE 4
//Reg#:                                      0x00  0x01  0x02  0x03
//Defaults                                   0x04, 0x00, 0x00, 0x04
static uint8_t INT_CTL_SET[INT_CTL_SIZE] = { 0x04, 0x00, 0x00, 0x04 };

/*FRR_CTL
group 0x02

0x00	FRR_CTL_A_MODE  default = INT_STATUS
0x01	FRR_CTL_B_MODE  default = INT_PEND
0x02	FRR_CTL_C_MODE  default = CURRENT_STATE
0x03	FRR_CTL_D_MODE  default = disabled, set to INT_PH_STATUS

*/
#define FRR_CTL_SIZE 4
//Reg#:                                      0x00  0x01  0x02  0x03
//Defaults                                   0x01, 0x02, 0x09, 0x00
static uint8_t FRR_CTL_SET[FRR_CTL_SIZE] = { 0x01, 0x02, 0x09, 0x03 };

/*PREAMBLE
group 0x10

0x00	PREAMBLE_TX_LENGTH
0x01	PREAMBLE_CONFIG_STD_1
0x02	PREAMBLE_CONFIG_NSTD
0x03	PREAMBLE_CONFIG_STD_2
0x04	PREAMBLE_CONFIG
0x05	PREAMBLE_PATTERN
0x09	PREAMBLE_POSTAMBLE_CONFIG
0x0A	PREAMBLE_POSTAMBLE_PATTERN

*/
#define PREAMBLE_SIZE 14 //TODO: split this into 2, max frame is 12
//Reg#:                                        0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09  0x0A  0x0B  0x0C  0x0D
//Defaults                                     0x08, 0x14, 0x00, 0x0F, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
static uint8_t PREAMBLE_SET[PREAMBLE_SIZE] = { 0x08, 0x14, 0x00, 0x0F, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

/*SYNC
group 0x11

0x00	SYNC_CONFIG
0x01	SYNC_BITS

*/
#define SYNC_SIZE 5
//Reg#:                                0x00  0x01  0x02  0x03  0x04
//Defaults                             0x01, 0x2D, 0xD4, 0x2D, 0xD4
static uint8_t SYNC_SET[SYNC_SIZE] = { 0x01, 0xB4, 0x2B, 0x00, 0x00 }; //4gfsk enable

/*PKT
group 0x12

//I am lazy so just doing settings here

*/

static uint8_t pkt_config1[1] = {0x00}; //4gfsk enable
static uint8_t pkt_field_1_config[1] = {0x00}; //4gfsk enable
  
/*MODEM
group 0x20

0x00	MODEM_MOD_TYPE
0x01	MODEM_MAP_CONTROL
0x02	MODEM_DSM_CTRL
0x03	MODEM_DATA_RATE
0x06	MODEM_TX_NCO_MODE
0x0a	MODEM_FREQ_DEV
0x0d	MODEM_FREQ_OFFSET
0x0f	MODEM_TX_FILTER_COEFF_8
0x10	MODEM_TX_FILTER_COEFF_7
0x11	MODEM_TX_FILTER_COEFF_6
0x12	MODEM_TX_FILTER_COEFF_5
0x13	MODEM_TX_FILTER_COEFF_4
0x14	MODEM_TX_FILTER_COEFF_3
0x15	MODEM_TX_FILTER_COEFF_2
0x16	MODEM_TX_FILTER_COEFF_1
0x17	MODEM_TX_FILTER_COEFF_0
0x18	MODEM_TX_RAMP_DELAY
0x19	MODEM_MDM_CTRL
0x1a	MODEM_IF_CONTROL
0x1b	MODEM_IF_FREQ
0x1e	MODEM_DECIMATION_CFG1
0x1f	MODEM_DECIMATION_CFG0

// ------------------------------ Note: Break here!!
// ------------------------------ 0x20 and 0x21 not present.

0x22	MODEM_BCR_OSR
0x24	MODEM_BCR_NCO_OFFSET
0x27	MODEM_BCR_GAIN
0x29	MODEM_BCR_GEAR
0x2a	MODEM_BCR_MISC1
0x2b	MODEM_BCR_MISC0
0x2c	MODEM_AFC_GEAR
0x2d	MODEM_AFC_WAIT
0x2e	MODEM_AFC_GAIN
0x30	MODEM_AFC_LIMITER
0x32	MODEM_AFC_MISC
0x33	MODEM_AFC_ZIFOFF
0x34	MODEM_ADC_CTRL
0x35	MODEM_AGC_CONTROL

// ------------------------------ Note: Break here!!
// ------------------------------ 0x36 and 0x37 not present.

0x38	MODEM_AGC_WINDOW_SIZE
0x39	MODEM_AGC_RFPD_DECAY
0x3a	MODEM_AGC_IFPD_DECAY
0x3b	MODEM_FSK4_GAIN1
0x3c	MODEM_FSK4_GAIN0
0x3d	MODEM_FSK4_TH
0x3f	MODEM_FSK4_MAP
0x40	MODEM_OOK_PDTC
0x41	MODEM_OOK_BLOPK
0x42	MODEM_OOK_CNT1
0x43	MODEM_OOK_MISC
0x44	MODEM_RAW_SEARCH
0x45	MODEM_RAW_CONTROL
0x46	MODEM_RAW_EYE
0x48	MODEM_ANT_DIV_MODE
0x49	MODEM_ANT_DIV_CONTROL
0x4a	MODEM_RSSI_THRESH
0x4b	MODEM_RSSI_JUMP_THRESH
0x4c	MODEM_RSSI_CONTROL
0x4d	MODEM_RSSI_CONTROL2
0x4e	MODEM_RSSI_COMP
0x51	MODEM_CLKGEN_BAND //need to set this to get 440MHz along with freq_control registers


NOTE: The maximum number of properties that may be set with a single SET_PROPERTY command is 12.
*/
#define MODEM_SIZE_1A 12
#define MODEM_SIZE_1B 12
#define MODEM_SIZE_1C 8
#define MODEM_SIZE_2A 12
#define MODEM_SIZE_2B 8
#define MODEM_SIZE_3A 12
#define MODEM_SIZE_3B 11
#define MODEM_SIZE_4 1

#define MODEM_SET_OFFSET_1A MODEM_MOD_TYPE
#define MODEM_SET_OFFSET_1B 0x0C
#define MODEM_SET_OFFSET_1C 0x18
#define MODEM_SET_OFFSET_2A MODEM_BCR_OSR
#define MODEM_SET_OFFSET_2B 0x2E
#define MODEM_SET_OFFSET_3A MODEM_AGC_WINDOW_SIZE
#define MODEM_SET_OFFSET_3B 0x44
#define MODEM_SET_OFFSET_4 MODEM_CLKGEN_BAND
//                                             modtp map   dsm   data_rate         tx_nco_mode             freq_dev  
//Reg#:                                        0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09  0x0a  0x0b
//Defaults                                     0x02, 0x80, 0x07, 0x0f, 0x42, 0x40, 0x01, 0xc9, 0xc3, 0x80, 0x00, 0x06
static uint8_t MODEM_SET_1A[MODEM_SIZE_1A] = { 0x03, 0x00, 0x07, 0x11, 0x94, 0x00, 0x09, 0xC9, 0xC3, 0x80, 0x00, 0x07, };

//                                         freq_dev  freq_offset tx_filt_coeff
//Reg#:                                        0x0c  0x0d  0x0e  0x0f  0x10  0x11  0x12  0x13  0x14  0x15  0x16  0x17
//Defaults                                     0xd3, 0x00, 0x00, 0x67  0x60, 0x4d, 0x36, 0x21, 0x11, 0x08, 0x03, 0x01
static uint8_t MODEM_SET_1B[MODEM_SIZE_1B] = { 0xDD, 0x00, 0x00, 0x67, 0x60, 0x4d, 0x36, 0x21, 0x11, 0x08, 0x03, 0x01 };

//                                             txrmp mdm   ifctl IF_freq           decimation_cfg
//Reg#:                                        0x18  0x19  0x1a  0x1b  0x1c  0x1d  0x1e  0x1f
//Defaults                                     0x01, 0x00, 0x08, 0x03, 0xc0, 0x00, 0x10, 0x20
static uint8_t MODEM_SET_1C[MODEM_SIZE_1C] = { 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x20, 0x20 };

//                                             bcr_osr     bcr_nco_offset    bcr_gain    gear  misc1 misc0 afcgr afcwt
//Reg#:                                        0x22  0x23  0x24  0x25  0x26  0x27  0x28  0x29  0x2a  0x2b  0x2c  0x2d
//Defaults                                     0x00, 0x4b, 0x06, 0xd3, 0xa0, 0x06, 0xd3, 0x02, 0xc0, 0x00, 0x00, 0x23
static uint8_t MODEM_SET_2A[MODEM_SIZE_2A] = { 0x00, 0x41, 0x07, 0xDD, 0x44, 0x07, 0xE0, 0x02, 0x00, 0x00, 0x00, 0x12 };

//                                             afc_gain    afc_limit   amisc zifof adcct agc_control
//Reg#:                                        0x2e  0x2f  0x30  0x31  0x32  0x33  0x34  0x35
//Defaults                                     0x83, 0x69  0x00, 0x40, 0xa0, 0x00, 0x00, 0xe0
static uint8_t MODEM_SET_2B[MODEM_SIZE_2B] = { 0xC1, 0xF7, 0x01, 0xBD, 0xE0, 0x00, 0x00, 0xE2 };

//                                             awndw rfpd  ifpd  fsk4_gain   fsk4_th     f4map pdtc  blopk cnt1  omisc
//Reg#:                                        0x38  0x39  0x3a  0x3b  0x3c  0x3d  0x3e  0x3f  0x40  0x41  0x42  0x43
//Defaults                                     0x11, 0x10, 0x10, 0x0b, 0x1c, 0x40, 0x00, 0x00  0x2b, 0x0c, 0xa4, 0x03
static uint8_t MODEM_SET_3A[MODEM_SIZE_3A] = { 0x11, 0x0E, 0x0E, 0x00, 0x1A, 0x40, 0x00, 0x00, 0x28, 0x0c, 0xA4, 0x03 };


//                                             rwsch rwctl raw_eye     atdvm atdvc rsith rsijp rssi_cntrol rssi_comp
//Reg#:                                        0x44  0x45  0x46  0x47  0x48  0x49  0x4a  0x4b  0x4c  0x4d  0x4e
//Defaults                                     0x56, 0x02, 0x00, 0xa3, 0x02, 0x80, 0xff, 0x0c, 0x01, 0x00, 0x40
static uint8_t MODEM_SET_3B[MODEM_SIZE_3B] = { 0xD6, 0x03, 0x01, 0x26, 0x01, 0x80, 0x40, 0x0c, 0x00, 0x00, 0x40 };

//                                           clockgen_band
//Reg#:                                      0x51
//Defaults                                   0x08
static uint8_t MODEM_SET_4[MODEM_SIZE_4] = { 0x0A };

  
/*MODEM_CHFLT
*/
#define MODEM_CHFLT_RX1_CHFLT_A_SIZE 12
#define MODEM_CHFLT_RX1_CHFLT_B_SIZE 6
#define MODEM_CHFLT_RX2_CHFLT_A_SIZE 12
#define MODEM_CHFLT_RX2_CHFLT_B_SIZE 6
static uint8_t MODEM_CHFLT_RX1_CHFLT_A[MODEM_CHFLT_RX1_CHFLT_A_SIZE] = { 0xff, 0xba, 0x0f, 0x51, 0xcf, 0xa9, 0xc9, 0xfc, 0x1b, 0x1e, 0x0f, 0x01 };
static uint8_t MODEM_CHFLT_RX1_CHFLT_B[MODEM_CHFLT_RX1_CHFLT_B_SIZE] = { 0xfc, 0xfd, 0x15, 0xff, 0x00, 0x0f };
static uint8_t MODEM_CHFLT_RX2_CHFLT_A[MODEM_CHFLT_RX2_CHFLT_A_SIZE] = { 0xff, 0xba, 0x0f, 0x51, 0xcf, 0xa9, 0xc9, 0xfc, 0x1b, 0x1e, 0x0f, 0x01 };
static uint8_t MODEM_CHFLT_RX2_CHFLT_B[MODEM_CHFLT_RX2_CHFLT_B_SIZE] = { 0xfc, 0xfd, 0x15, 0xff, 0x00, 0x0f };

/*PA
group 0x22

0x00	PA_MODE
0x01	PA_PWR_LVL //set this lower for testing
0x02	PA_BIAS_CLKDUTY
0x03	PA_TC
0x04	PA_RAMP_EX
0x05	PA_RAMP_DOWN_DELAY

*/
#define PA_SIZE 6
//Reg#:                            0x00  0x01  0x02  0x03  0x04  0x05
//Defaults                         0x08, 0x7F, 0x00, 0x5D, 0x00, 0x23
static uint8_t PA_SET[PA_SIZE] = { 0x08, 0x01, 0x00, 0x5D, 0x00, 0x23 };

/*SYNTH

*/

/*MATCH

*/

/*FREQ_CONTROL
group 0x40

0x00	FREQ_CONTROL_INTE              set to 0x39 for 440MHz
0x01	FREQ_CONTROL_FRAC              set to 0x0D5555 for 440MHz
0x04	FREQ_CONTROL_CHANNEL_STEP_SIZE
0x06	FREQ_CONTROL_W_SIZE
0x07	FREQ_CONTROL_VCOCNT_RX_ADJ     adjusted in WDS

*/
#define FREQ_CONTROL_SIZE 8
//Reg#:                                                0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07
//Defaults                                             0x3C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0xFF
static uint8_t FREQ_CONTROL_SET[FREQ_CONTROL_SIZE] = { 0x39, 0x0D, 0x55, 0x55, 0x00, 0x00, 0x20, 0xFE };


/*RX_HOP

*/
